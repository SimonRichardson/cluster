// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SimonRichardson/cluster/pkg/clients (interfaces: Client,Response)

package mocks

import (
	clients "github.com/SimonRichardson/cluster/pkg/clients"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockClient) Get(_param0 string) (clients.Response, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(clients.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), arg0)
}

// Post mocks base method
func (_m *MockClient) Post(_param0 string, _param1 []byte) (clients.Response, error) {
	ret := _m.ctrl.Call(_m, "Post", _param0, _param1)
	ret0, _ := ret[0].(clients.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (_mr *MockClientMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Post", reflect.TypeOf((*MockClient)(nil).Post), arg0, arg1)
}

// MockResponse is a mock of Response interface
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return _m.recorder
}

// Bytes mocks base method
func (_m *MockResponse) Bytes() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Bytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bytes indicates an expected call of Bytes
func (_mr *MockResponseMockRecorder) Bytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Bytes", reflect.TypeOf((*MockResponse)(nil).Bytes))
}

// Close mocks base method
func (_m *MockResponse) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockResponseMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockResponse)(nil).Close))
}

// Reader mocks base method
func (_m *MockResponse) Reader() io.ReadCloser {
	ret := _m.ctrl.Call(_m, "Reader")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// Reader indicates an expected call of Reader
func (_mr *MockResponseMockRecorder) Reader() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reader", reflect.TypeOf((*MockResponse)(nil).Reader))
}

// Status mocks base method
func (_m *MockResponse) Status() int {
	ret := _m.ctrl.Call(_m, "Status")
	ret0, _ := ret[0].(int)
	return ret0
}

// Status indicates an expected call of Status
func (_mr *MockResponseMockRecorder) Status() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}
