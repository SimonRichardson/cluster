// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SimonRichardson/cluster/pkg/queue (interfaces: Queue)

package mocks

import (
	queue "github.com/SimonRichardson/cluster/pkg/queue"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQueue is a mock of Queue interface
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return _m.recorder
}

// Dequeue mocks base method
func (_m *MockQueue) Dequeue() (queue.ReadSegment, error) {
	ret := _m.ctrl.Call(_m, "Dequeue")
	ret0, _ := ret[0].(queue.ReadSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue
func (_mr *MockQueueMockRecorder) Dequeue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Dequeue", reflect.TypeOf((*MockQueue)(nil).Dequeue))
}

// Enqueue mocks base method
func (_m *MockQueue) Enqueue() (queue.WriteSegment, error) {
	ret := _m.ctrl.Call(_m, "Enqueue")
	ret0, _ := ret[0].(queue.WriteSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue
func (_mr *MockQueueMockRecorder) Enqueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Enqueue", reflect.TypeOf((*MockQueue)(nil).Enqueue))
}
